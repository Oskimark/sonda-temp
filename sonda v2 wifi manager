//sensor a thingspeak con modo AP automatico y manual, con seteo de credenciales enel ap a eeprom
#include <ESP8266WiFi.h>
#include <WiFiManager.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>
#include <EEPROM.h>

// Definir pines y configuraciones
const int pinModoAP = 4;  // El pin para activar modo AP
const int ledAPMode = 2;  // LED para modo AP
const int ledWiFiConnected = 0; // LED para modo WiFi conectado

// Variables para ThingSpeak
String apiKey = "";
String channelId = "";

// Tamaño de la EEPROM
#define EEPROM_SIZE 128
#define API_KEY_ADDR 0
#define CHANNEL_ID_ADDR 32

// Función para leer datos del sensor NTC
float leerTemperaturaNTC() {
  int analogValue = analogRead(A0);
  // Convierte la lectura analógica en temperatura (esto depende del divisor de tensión con NTC)
  float temperatura = analogValue / 1024.0 * 100; // Ajusta la fórmula según tu circuito
  return temperatura;
}

// Guardar credenciales en EEPROM
void guardarCredencialesEEPROM(const String& key, const String& channel) {
  EEPROM.begin(EEPROM_SIZE);
  
  for (int i = 0; i < key.length(); i++) {
    EEPROM.write(API_KEY_ADDR + i, key[i]);
  }
  EEPROM.write(API_KEY_ADDR + key.length(), '\0'); // Fin de cadena

  for (int i = 0; i < channel.length(); i++) {
    EEPROM.write(CHANNEL_ID_ADDR + i, channel[i]);
  }
  EEPROM.write(CHANNEL_ID_ADDR + channel.length(), '\0'); // Fin de cadena
  
  EEPROM.commit();
  EEPROM.end();
}

// Leer credenciales desde EEPROM
void leerCredencialesEEPROM() {
  EEPROM.begin(EEPROM_SIZE);

  char storedApiKey[33];
  char storedChannelId[17];

  for (int i = 0; i < 32; i++) {
    storedApiKey[i] = EEPROM.read(API_KEY_ADDR + i);
  }
  storedApiKey[32] = '\0'; // Asegurar que esté terminada la cadena

  for (int i = 0; i < 16; i++) {
    storedChannelId[i] = EEPROM.read(CHANNEL_ID_ADDR + i);
  }
  storedChannelId[16] = '\0'; // Asegurar que esté terminada la cadena
  
  apiKey = String(storedApiKey);
  channelId = String(storedChannelId);

  EEPROM.end();
}

// Función para enviar datos a ThingSpeak
void enviarDatosThingSpeak(float temperatura) {
  if (WiFi.status() == WL_CONNECTED) {
    WiFiClient client;
    HTTPClient http;
    String url = "http://api.thingspeak.com/update?api_key=" + apiKey + "&field1=" + String(temperatura);
    http.begin(client, url);
    int httpCode = http.GET();
    
    if (httpCode > 0) {
      Serial.printf("Datos enviados a ThingSpeak: %d\n", httpCode);
    } else {
      Serial.println("Error al enviar datos a ThingSpeak");
    }
    http.end();
  }
}

void setup() {
  // Configuración inicial
  pinMode(pinModoAP, INPUT_PULLUP);
  pinMode(ledAPMode, OUTPUT);
  pinMode(ledWiFiConnected, OUTPUT);
  digitalWrite(ledAPMode, LOW);
  digitalWrite(ledWiFiConnected, LOW);
  
  Serial.begin(115200);
  leerCredencialesEEPROM(); // Cargar credenciales de la EEPROM

  // WiFiManager para manejar el modo AP y credenciales
  WiFiManager wifiManager;
  
  // Callback para almacenar la API key y el canal de ThingSpeak
  WiFiManagerParameter custom_api_key("api_key", "ThingSpeak API Key", apiKey.c_str(), 32);
  WiFiManagerParameter custom_channel_id("channel_id", "ThingSpeak Channel ID", channelId.c_str(), 16);
  
  wifiManager.addParameter(&custom_api_key);
  wifiManager.addParameter(&custom_channel_id);
  
  // Verificar si estamos en modo AP
  if (digitalRead(pinModoAP) == LOW) {
    Serial.println("Pin en LOW, iniciando en modo AP...");
    wifiManager.startConfigPortal("ESP_AP_Config");
    
    // Guardar las credenciales ingresadas
    apiKey = custom_api_key.getValue();
    channelId = custom_channel_id.getValue();
    Serial.println("API Key y Canal de ThingSpeak guardados.");
    
    guardarCredencialesEEPROM(apiKey, channelId); // Guardar en EEPROM

    digitalWrite(ledAPMode, HIGH);
  } else {
    // Intentar conectar a la red WiFi
    if (!wifiManager.autoConnect("setup")) {
      Serial.println("No se pudo conectar a WiFi. Reiniciando...");
      delay(3000);
      ESP.restart();
    }
    
    // Conexión exitosa
    digitalWrite(ledWiFiConnected, HIGH);
  }
}

void loop() {
  // Leer el sensor de temperatura NTC
  float temperatura = leerTemperaturaNTC();
  
  if (isnan(temperatura)) {
    Serial.println("Error al leer el sensor de temperatura.");
    return;
  }

  Serial.print("Temperatura: ");
  Serial.println(temperatura);

  // Enviar datos a ThingSpeak
  enviarDatosThingSpeak(temperatura);

  // Esperar 15 segundos antes de la próxima lectura
  delay(15000);
}
